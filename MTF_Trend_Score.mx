#MTF TREND SCORE - Multi-Timeframe Trend Analysis
#Includes: VWAP, 5/8/21 EMAs, 200 SMA across 5 timeframes
#Original concept based on MTF SQUEEZE PRO by CASEY BRETT

##Global Variables
input shortSMALength = 5;   # Added 5 SMA
input ema8Length = 8;       # Added 8 EMA
input emaLength = 21;
input longSMALength = 200;
input averageType = AverageType.EXPONENTIAL;

# Timeframe toggles
input DayLabel = yes;
input FourHourLabel = yes;
input HourLabel = yes;
input FifteenMinLabel = yes;
input FiveMinLabel = yes;
input VWAPLabel = yes;

# Color definitions - simplified to just two colors
DefineGlobalColor("Below_MA", Color.RED);
DefineGlobalColor("Above_MA", Color.DARK_GREEN);

# Calculate Daily VWAP (skip for SPX/indices)
def dailyVWAP = if VWAPLabel then VWAP(period = "Day") else 0;
def priceAboveDailyVWAP = if VWAPLabel then close > dailyVWAP else no;

## Daily Timeframe
def dayPrice;
def dayShortSMA;  # Added 5 SMA
def day8EMA;      # Added 8 EMA
def dayEMA;
def dayLongSMA;
def dayAboveShortSMA;  # Added 5 SMA check
def dayAbove8EMA;      # Added 8 EMA check
def dayAboveEMA;
def dayAboveLongSMA;
def dayAggregationPeriod;

if GetAggregationPeriod() <= AggregationPeriod.DAY {
    dayPrice = close(period = "Day");
    dayShortSMA = Average(dayPrice, shortSMALength);  # Added 5 SMA
    day8EMA = ExpAverage(dayPrice, ema8Length);       # Added 8 EMA
    dayEMA = ExpAverage(dayPrice, emaLength);
    dayLongSMA = Average(dayPrice, longSMALength);
    dayAboveShortSMA = dayPrice > dayShortSMA;  # Added 5 SMA check
    dayAbove8EMA = dayPrice > day8EMA;          # Added 8 EMA check
    dayAboveEMA = dayPrice > dayEMA;
    dayAboveLongSMA = dayPrice > dayLongSMA;
    dayAggregationPeriod = 1;
}
else {
    dayPrice = 0;
    dayShortSMA = 0;  # Added 5 SMA
    day8EMA = 0;      # Added 8 EMA
    dayEMA = 0;
    dayLongSMA = 0;
    dayAboveShortSMA = 0;  # Added 5 SMA check
    dayAbove8EMA = 0;      # Added 8 EMA check
    dayAboveEMA = 0;
    dayAboveLongSMA = 0;
    dayAggregationPeriod = 0;
}

## 4-Hour Timeframe
def fourHourPrice;
def fourHourEMA;
def fourHourLongSMA;
def fourHourAboveEMA;
def fourHourAboveLongSMA;
def fourHourAggregationPeriod;

if GetAggregationPeriod() <= AggregationPeriod.FOUR_HOURS {
    fourHourPrice = close(period = "4 Hours");
    fourHourEMA = ExpAverage(fourHourPrice, emaLength);
    fourHourLongSMA = Average(fourHourPrice, longSMALength);
    fourHourAboveEMA = fourHourPrice > fourHourEMA;
    fourHourAboveLongSMA = fourHourPrice > fourHourLongSMA;
    fourHourAggregationPeriod = 1;
}
else {
    fourHourPrice = 0;
    fourHourEMA = 0;
    fourHourLongSMA = 0;
    fourHourAboveEMA = 0;
    fourHourAboveLongSMA = 0;
    fourHourAggregationPeriod = 0;
}

## 1-Hour Timeframe
def hourPrice;
def hourEMA;
def hourLongSMA;
def hourAboveEMA;
def hourAboveLongSMA;
def hourAggregationPeriod;

if GetAggregationPeriod() <= AggregationPeriod.HOUR {
    hourPrice = close(period = "1 Hour");
    hourEMA = ExpAverage(hourPrice, emaLength);
    hourLongSMA = Average(hourPrice, longSMALength);
    hourAboveEMA = hourPrice > hourEMA;
    hourAboveLongSMA = hourPrice > hourLongSMA;
    hourAggregationPeriod = 1;
}
else {
    hourPrice = 0;
    hourEMA = 0;
    hourLongSMA = 0;
    hourAboveEMA = 0;
    hourAboveLongSMA = 0;
    hourAggregationPeriod = 0;
}

## 15-Minute Timeframe
def fifteenMinPrice;
def fifteenMinEMA;
def fifteenMinLongSMA;
def fifteenMinAboveEMA;
def fifteenMinAboveLongSMA;
def fifteenMinAggregationPeriod;

if GetAggregationPeriod() <= AggregationPeriod.FIFTEEN_MIN {
    fifteenMinPrice = close(period = "15 Min");
    fifteenMinEMA = ExpAverage(fifteenMinPrice, emaLength);
    fifteenMinLongSMA = Average(fifteenMinPrice, longSMALength);
    fifteenMinAboveEMA = fifteenMinPrice > fifteenMinEMA;
    fifteenMinAboveLongSMA = fifteenMinPrice > fifteenMinLongSMA;
    fifteenMinAggregationPeriod = 1;
}
else {
    fifteenMinPrice = 0;
    fifteenMinEMA = 0;
    fifteenMinLongSMA = 0;
    fifteenMinAboveEMA = 0;
    fifteenMinAboveLongSMA = 0;
    fifteenMinAggregationPeriod = 0;
}

## 5-Minute Timeframe
def fiveMinPrice;
def fiveMinEMA;
def fiveMinLongSMA;
def fiveMinAboveEMA;
def fiveMinAboveLongSMA;
def fiveMinAggregationPeriod;

if GetAggregationPeriod() <= AggregationPeriod.FIVE_MIN {
    fiveMinPrice = close(period = "5 Min");
    fiveMinEMA = ExpAverage(fiveMinPrice, emaLength);
    fiveMinLongSMA = Average(fiveMinPrice, longSMALength);
    fiveMinAboveEMA = fiveMinPrice > fiveMinEMA;
    fiveMinAboveLongSMA = fiveMinPrice > fiveMinLongSMA;
    fiveMinAggregationPeriod = 1;
}
else {
    fiveMinPrice = 0;
    fiveMinEMA = 0;
    fiveMinLongSMA = 0;
    fiveMinAboveEMA = 0;
    fiveMinAboveLongSMA = 0;
    fiveMinAggregationPeriod = 0;
}

# Calculate weighted score - handles SPX (no VWAP) by making it optional
def score = 
    (if VWAPLabel and priceAboveDailyVWAP then 2 else if VWAPLabel then -2 else 0) +  # VWAP gets 2 points if enabled
    (if dayAboveEMA then 2 else -2) +          # Daily 21 EMA gets 2 points
    (if dayAboveLongSMA then 1 else -1) +      # Daily 200 SMA gets 1 point
    (if fourHourAboveEMA then 1 else -1) +     # 4H 21 EMA gets 1 point
    (if hourAboveEMA then 1 else -1) +         # 1H 21 EMA gets 1 point
    (if fifteenMinAboveEMA then 1 else -1) +   # 15M 21 EMA gets 1 point
    (if fiveMinAboveEMA then 1 else -1);       # 5M 21 EMA gets 1 point

# Add score label first
AddLabel(
    yes,
    "Score: " + score + " ",
    if score > 0 then GlobalColor("Above_MA") else GlobalColor("Below_MA")
);

# Add other labels in the specified order
AddLabel(
    VWAPLabel,
    if VWAPLabel then "VWAP: " + Round(dailyVWAP, 0) + " " else "VWAP: N/A ",
    if !VWAPLabel then Color.GRAY else if priceAboveDailyVWAP then GlobalColor("Above_MA") else GlobalColor("Below_MA")
);

# 2. Daily Labels
AddLabel(
    DayLabel and dayAggregationPeriod,
    "D5: " + Round(dayShortSMA, 0) + " ",
    if dayAboveShortSMA then GlobalColor("Above_MA") else GlobalColor("Below_MA")
);
AddLabel(
    DayLabel and dayAggregationPeriod,
    "D8: " + Round(day8EMA, 0) + " ",
    if dayAbove8EMA then GlobalColor("Above_MA") else GlobalColor("Below_MA")
);
AddLabel(
    DayLabel and dayAggregationPeriod,
    "D21: " + Round(dayEMA, 0) + " ",
    if dayAboveEMA then GlobalColor("Above_MA") else GlobalColor("Below_MA")
);
AddLabel(
    DayLabel and dayAggregationPeriod,
    "D200: " + Round(dayLongSMA, 0) + " ",
    if dayAboveLongSMA then GlobalColor("Above_MA") else GlobalColor("Below_MA")
);

# 3. 200 SMA Labels (Descending Timeframe: 4h, 1h, 15m, 5m)
AddLabel(
    FourHourLabel and fourHourAggregationPeriod,
    "4h200: " + Round(fourHourLongSMA, 0) + " ",
    if fourHourAboveLongSMA then GlobalColor("Above_MA") else GlobalColor("Below_MA")
);
AddLabel(
    HourLabel and hourAggregationPeriod,
    "1h200: " + Round(hourLongSMA, 0) + " ",
    if hourAboveLongSMA then GlobalColor("Above_MA") else GlobalColor("Below_MA")
);
AddLabel(
    FifteenMinLabel and fifteenMinAggregationPeriod,
    "15m200: " + Round(fifteenMinLongSMA, 0) + " ",
    if fifteenMinAboveLongSMA then GlobalColor("Above_MA") else GlobalColor("Below_MA")
);
AddLabel(
    FiveMinLabel and fiveMinAggregationPeriod,
    "5m200: " + Round(fiveMinLongSMA, 0) + " ",
    if fiveMinAboveLongSMA then GlobalColor("Above_MA") else GlobalColor("Below_MA")
);

# 4. 21 EMA Labels (Descending Timeframe: 4h, 1h, 15m, 5m)
AddLabel(
    FourHourLabel and fourHourAggregationPeriod,
    "4h21: " + Round(fourHourEMA, 0) + " ",
    if fourHourAboveEMA then GlobalColor("Above_MA") else GlobalColor("Below_MA")
);
AddLabel(
    HourLabel and hourAggregationPeriod,
    "1h21: " + Round(hourEMA, 0) + " ",
    if hourAboveEMA then GlobalColor("Above_MA") else GlobalColor("Below_MA")
);
AddLabel(
    FifteenMinLabel and fifteenMinAggregationPeriod,
    "15m21: " + Round(fifteenMinEMA, 0) + " ",
    if fifteenMinAboveEMA then GlobalColor("Above_MA") else GlobalColor("Below_MA")
);
AddLabel(
    FiveMinLabel and fiveMinAggregationPeriod,
    "5m21: " + Round(fiveMinEMA, 0) + " ",
    if fiveMinAboveEMA then GlobalColor("Above_MA") else GlobalColor("Below_MA")
);
